{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport AuthContext from \"../../../context/authContext/AuthContext\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Accounts from \"../../../models/auth/data.json\";\nimport logo from \"../../../assets/logo.jpg\";\nimport { find } from \"lodash-es\";\nimport { styles } from \"./login.style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Login = function Login() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isAbleToLoin = _useState6[0],\n      setIsAbleToLogin = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isMounted = _useState8[0],\n      setMounted = _useState8[1];\n\n  var _useContext = useContext(AuthContext),\n      onAuthentication = _useContext.onAuthentication;\n\n  var onUserAuthentication = function onUserAuthentication() {\n    var authInfo = find(Accounts, function (account) {\n      return account.email === email && account.password === password;\n    });\n\n    if (authInfo == null) {\n      alert(\"The email or password is incorrect\");\n      return;\n    }\n\n    onAuthentication();\n    console.log(authInfo);\n    console.log(Accounts);\n  };\n\n  var onEmailChange = function onEmailChange(value) {\n    setEmail(value);\n  };\n\n  var onPaswordChange = function onPaswordChange(value) {\n    setPassword(value);\n  };\n\n  useEffect(function () {\n    var isMounted = true;\n    if (isMounted) setIsAbleToLogin(Boolean(email && password));\n    return function () {\n      isMounted = false;\n    };\n  }, [email, password]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.imageArea,\n      children: _jsx(Image, {\n        source: logo,\n        style: {\n          width: 190,\n          height: 73,\n          marginTop: 51\n        }\n      })\n    }), _jsxs(View, {\n      style: styles.inputArea,\n      children: [_jsx(Text, {\n        children: \"Email\"\n      }), _jsx(TextInput, {\n        style: styles.inputEmail,\n        placeholder: \"Enter your email here..\",\n        value: email,\n        testID: \"emailInput\",\n        onChangeText: onEmailChange\n      }), _jsx(Text, {\n        children: \"Password\"\n      }), _jsx(TextInput, {\n        style: styles.inputPassword,\n        secureTextEntry: true,\n        placeholder: \"Enter your password here..\",\n        value: password,\n        testID: \"passwordInput\",\n        onChangeText: onPaswordChange\n      }), _jsx(Text, {\n        style: styles.Des,\n        children: \"Must contains 8 Characters, One Uppercase, One Lowercase and One Number\"\n      }), _jsx(TouchableOpacity, {\n        style: [styles.buttonLogin, isAbleToLoin ? styles.buttonLoginEnable : styles.buttonLoginDisabled],\n        testID: \"btn-signin\",\n        onPress: onUserAuthentication,\n        children: _jsx(Text, {\n          style: {\n            color: \"#fff\"\n          },\n          children: \"Sign In\"\n        })\n      }), _jsx(Text, {\n        style: styles.underline,\n        children: \"Forgor Password?\"\n      })]\n    }), _jsx(View, {\n      style: styles.footArea,\n      children: _jsxs(Text, {\n        children: [\"Don't have an account? \", _jsx(Text, {\n          style: styles.underline,\n          children: \"Sign Up\"\n        })]\n      })\n    })]\n  });\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/kevincheck/front-end/src/screens/preAuthScreens/login/login.tsx"],"names":["React","useState","useContext","useEffect","AuthContext","Accounts","logo","find","styles","Login","email","setEmail","password","setPassword","isAbleToLoin","setIsAbleToLogin","isMounted","setMounted","onAuthentication","onUserAuthentication","authInfo","account","alert","console","log","onEmailChange","value","onPaswordChange","Boolean","container","imageArea","width","height","marginTop","inputArea","inputEmail","inputPassword","Des","buttonLogin","buttonLoginEnable","buttonLoginDisabled","color","underline","footArea"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport AuthContext from \"../../../context/authContext/AuthContext\";\nimport { View, Text, Image, TouchableOpacity, TextInput } from \"react-native\";\nimport Accounts from \"../../../models/auth/data.json\";\nimport logo from \"../../../assets/logo.jpg\";\nimport { find } from \"lodash-es\";\nimport { styles } from \"./login.style\";\n\nconst Login = () => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [isAbleToLoin, setIsAbleToLogin] = useState<boolean>(false);\n  const [isMounted, setMounted] = useState<boolean>(false);\n\n\n  const { onAuthentication } = useContext(AuthContext);\n\n  const onUserAuthentication = () => {\n    const authInfo = find(\n      Accounts,\n      (account) => account.email === email && account.password === password\n    );\n    if (authInfo == null) {\n      alert(\"The email or password is incorrect\");\n      return;\n    }\n    onAuthentication();\n    console.log(authInfo);\n    console.log(Accounts);\n  };\n\n  const onEmailChange = (value: any) => {\n    setEmail(value);\n  };\n\n  const onPaswordChange = (value: any) => {\n    setPassword(value);\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    if (isMounted) setIsAbleToLogin(Boolean(email && password));\n    return () => {\n      isMounted = false;\n    };\n  }, [email, password]);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageArea}>\n        <Image\n          source={logo}\n          style={{ width: 190, height: 73, marginTop: 51 }}\n        />\n      </View>\n\n      <View style={styles.inputArea}>\n        <Text>Email</Text>\n        <TextInput\n          style={styles.inputEmail}\n          placeholder=\"Enter your email here..\"\n          value={email}\n          testID=\"emailInput\"\n          onChangeText={onEmailChange}\n        />\n        <Text>Password</Text>\n        <TextInput\n          style={styles.inputPassword}\n          secureTextEntry={true}\n          placeholder=\"Enter your password here..\"\n          value={password}\n          testID=\"passwordInput\"\n          onChangeText={onPaswordChange}\n        />\n        <Text style={styles.Des}>\n          Must contains 8 Characters, One Uppercase, One Lowercase and One\n          Number\n        </Text>\n        <TouchableOpacity\n          style={[\n            styles.buttonLogin,\n            isAbleToLoin\n              ? styles.buttonLoginEnable\n              : styles.buttonLoginDisabled,\n          ]}\n          testID=\"btn-signin\"\n          onPress={onUserAuthentication}\n        >\n          <Text style={{ color: \"#fff\" }}>Sign In</Text>\n        </TouchableOpacity>\n        <Text style={styles.underline}>Forgor Password?</Text>\n      </View>\n\n      <View style={styles.footArea}>\n        <Text>\n          Don't have an account? <Text style={styles.underline}>Sign Up</Text>\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}