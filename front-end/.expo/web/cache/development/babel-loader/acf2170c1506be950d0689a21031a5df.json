{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport AuthContext from \"./AuthContext\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar AuthState = function AuthState(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      userToken = _useState2[0],\n      setUserToken = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  useEffect(function () {\n    checkAuthenticationStatus();\n  }, []);\n\n  var checkAuthenticationStatus = function checkAuthenticationStatus() {\n    var returnedToken;\n    return _regeneratorRuntime.async(function checkAuthenticationStatus$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"user-token\"));\n\n          case 3:\n            returnedToken = _context.sent;\n            console.log(\"TOKEN\", returnedToken);\n            setUserToken(returnedToken);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.warn(\"Here's the error that occured while retrieving token: \" + _context.t0);\n\n          case 11:\n            setIsLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var onAuthentication = function onAuthentication() {\n    var USER_TOKEN;\n    return _regeneratorRuntime.async(function onAuthentication$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            USER_TOKEN = \"token123\";\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"user-token\", USER_TOKEN));\n\n          case 3:\n            setUserToken(USER_TOKEN);\n            console.warn(\"user has been authenticated!\");\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var userSignout = function userSignout() {\n    return _regeneratorRuntime.async(function userSignout$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"============================= SIGNOUT =========================\");\n            console.log(\"============================= SIGNOUT =========================\");\n            console.log(\"============================= SIGNOUT =========================\");\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem(\"user-token\"));\n\n          case 5:\n            setUserToken(null);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      onAuthentication: onAuthentication,\n      userToken: userToken,\n      isLoading: isLoading,\n      userSignout: userSignout\n    },\n    children: props.children\n  });\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/front-end/src/context/authContext/AuthState.tsx"],"names":["React","useState","useEffect","AuthContext","AsyncStorage","AuthState","props","userToken","setUserToken","isLoading","setIsLoading","checkAuthenticationStatus","getItem","returnedToken","console","log","warn","onAuthentication","USER_TOKEN","setItem","userSignout","removeItem","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAQZ;AACJ,kBAAkCL,QAAQ,CAAgB,IAAhB,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAkCP,QAAQ,CAAU,IAAV,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,yBAAyB;AAC1B,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEFP,YAAY,CAACQ,OAAb,CAAqB,YAArB,CAFE;;AAAA;AAExBC,YAAAA,aAFwB;AAG9BC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,aAArB;AACAL,YAAAA,YAAY,CAACK,aAAD,CAAZ;AAJ8B;AAAA;;AAAA;AAAA;AAAA;AAM9BC,YAAAA,OAAO,CAACE,IAAR;;AAN8B;AAUhCN,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AAVgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAaA,MAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,UADiB,GACJ,UADI;AAAA;AAAA,6CAEjBd,YAAY,CAACe,OAAb,CAAqB,YAArB,EAAmCD,UAAnC,CAFiB;;AAAA;AAGvBV,YAAAA,YAAY,CAACU,UAAD,CAAZ;AACAJ,YAAAA,OAAO,CAACE,IAAR,CAAa,8BAAb;;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAOA,MAAMI,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAClBN,YAAAA,OAAO,CAACC,GAAR,CACE,iEADF;AAGAD,YAAAA,OAAO,CAACC,GAAR,CACE,iEADF;AAGAD,YAAAA,OAAO,CAACC,GAAR,CACE,iEADF;AAPkB;AAAA,6CAaZX,YAAY,CAACiB,UAAb,CAAwB,YAAxB,CAbY;;AAAA;AAclBb,YAAAA,YAAY,CAAC,IAAD,CAAZ;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAiBA,SACE,KAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,gBAAgB,EAAhBA,gBADK;AAELV,MAAAA,SAAS,EAATA,SAFK;AAGLE,MAAAA,SAAS,EAATA,SAHK;AAILW,MAAAA,WAAW,EAAXA;AAJK,KADT;AAAA,cAQGd,KAAK,CAACgB;AART,IADF;AAYD,CAjED;;AAmEA,eAAejB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AuthContext from \"./AuthContext\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst AuthState = (props: {\n  children:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n}) => {\n  const [userToken, setUserToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    checkAuthenticationStatus();\n  }, []);\n\n  const checkAuthenticationStatus = async () => {\n    try {\n      const returnedToken = await AsyncStorage.getItem(\"user-token\");\n      console.log(\"TOKEN\", returnedToken);\n      setUserToken(returnedToken);\n    } catch (err) {\n      console.warn(\n        `Here's the error that occured while retrieving token: ${err}`\n      );\n    }\n    setIsLoading(false);\n  };\n\n  const onAuthentication = async () => {\n    const USER_TOKEN = \"token123\";\n    await AsyncStorage.setItem(\"user-token\", USER_TOKEN);\n    setUserToken(USER_TOKEN);\n    console.warn(\"user has been authenticated!\");\n  };\n\n  const userSignout = async () => {\n    console.log(\n      \"============================= SIGNOUT =========================\"\n    );\n    console.log(\n      \"============================= SIGNOUT =========================\"\n    );\n    console.log(\n      \"============================= SIGNOUT =========================\"\n    );\n\n    // mock object support : AsyncStorage - where address\n    // mock method: removeItem - what apartment\n    await AsyncStorage.removeItem(\"user-token\");\n    setUserToken(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        onAuthentication,\n        userToken,\n        isLoading,\n        userSignout,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}