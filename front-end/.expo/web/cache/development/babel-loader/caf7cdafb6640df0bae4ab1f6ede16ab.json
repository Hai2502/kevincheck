{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _templateObject;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useContext, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport CheckBox from \"react-native-web/dist/exports/CheckBox\";\nimport AuthContext from \"../../../context/authContext/AuthContext\";\nimport { styles } from \"./homeScreen.style\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    checked = _useState2[0],\n    setChecked = _useState2[1];\n\nvar GET_TODOS = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  query Todos {\\n    todos {\\n      id\\n      description\\n      isFinished\\n    }\\n  }\\n\"])));\n\nvar HomeScreen = function HomeScreen() {\n  var _useContext = useContext(AuthContext),\n      userSignout = _useContext.userSignout;\n\n  var _useQuery = useQuery(GET_TODOS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  console.log(\"Error: \", error);\n  console.log(\"data: \", data);\n  if (loading) return _jsx(Text, {\n    children: \"Loading...\"\n  });\n  if (error) return _jsx(Text, {\n    children: \"Error loading todos \"\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.Thead,\n      children: _jsx(Text, {\n        style: styles.headline,\n        children: \"TODO\"\n      })\n    }), _jsx(View, {\n      style: styles.todo_fetch,\n      children: data.todos.map(function (todo) {\n        return _jsxs(View, {\n          style: styles.todo_container,\n          children: [_jsx(View, {\n            style: styles.todo_item,\n            children: _jsx(Text, {\n              children: todo.description\n            })\n          }), _jsx(CheckBox, {\n            style: styles.checkbox,\n            value: checked[todo.id],\n            onValueChange: function onValueChange(newValue) {\n              setChecked(_objectSpread(_objectSpread({}, checked), {}, _defineProperty({}, todo.id, newValue)));\n            }\n          })]\n        }, todo.id);\n      })\n    }), _jsxs(View, {\n      style: styles.Tbottom,\n      children: [_jsx(Button, {\n        title: \"add todo\",\n        onPress: userSignout\n      }), _jsx(Button, {\n        testID: \"btn-signout\",\n        title: \"LOG OUT\",\n        onPress: userSignout\n      })]\n    })]\n  });\n};\n\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/kevincheck/front-end/src/screens/postAuthScreens/home/homeScreen.tsx"],"names":["React","useContext","useState","AuthContext","styles","useQuery","gql","checked","setChecked","GET_TODOS","HomeScreen","userSignout","loading","error","data","console","log","container","Thead","headline","todo_fetch","todos","map","todo","todo_container","todo_item","description","checkbox","id","newValue","Tbottom"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;;;;;AAEA,OAAOC,WAAP;AACA,SAASC,MAAT;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;;;AACA,gBAA8BJ,QAAQ,EAAtC;AAAA;AAAA,IAAOK,OAAP;AAAA,IAAgBC,UAAhB;;AAEA,IAAMC,SAAS,GAAGH,GAAH,qKAAf;;AASA,IAAMI,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,oBAAwBT,UAAU,CAACE,WAAD,CAAlC;AAAA,MAAQQ,WAAR,eAAQA,WAAR;;AACA,kBAAiCN,QAAQ,CAACI,SAAD,CAAzC;AAAA,MAAQG,OAAR,aAAQA,OAAR;AAAA,MAAiBC,KAAjB,aAAiBA,KAAjB;AAAA,MAAwBC,IAAxB,aAAwBA,IAAxB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AAEA,MAAIF,OAAJ,EAAa,OAAO,KAAC,IAAD;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,KAAC,IAAD;AAAA;AAAA,IAAP;AAEX,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACa,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEb,MAAM,CAACc,KAApB;AAAA,gBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEd,MAAM,CAACe,QAApB;AAAA;AAAA;AADF,MADF,EAKE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEf,MAAM,CAACgB,UAApB;AAAA,gBACGN,IAAI,CAACO,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD;AAAA,eACd,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEnB,MAAM,CAACoB,cAApB;AAAA,qBACE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEpB,MAAM,CAACqB,SAApB;AAAA,sBACE,KAAC,IAAD;AAAA,wBAAOF,IAAI,CAACG;AAAZ;AADF,YADF,EAKE,KAAC,QAAD;AACE,YAAA,KAAK,EAAEtB,MAAM,CAACuB,QADhB;AAEE,YAAA,KAAK,EAAEpB,OAAO,CAACgB,IAAI,CAACK,EAAN,CAFhB;AAGE,YAAA,aAAa,EAAE,uBAACC,QAAD,EAAc;AAAErB,cAAAA,UAAU,iCAAKD,OAAL,2BAAegB,IAAI,CAACK,EAApB,EAAyBC,QAAzB,GAAV;AAA+C;AAHhF,YALF;AAAA,WAAyCN,IAAI,CAACK,EAA9C,CADc;AAAA,OAAf;AADH,MALF,EAqBE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAExB,MAAM,CAAC0B,OAApB;AAAA,iBACE,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAEnB;AAAlC,QADF,EAEE,KAAC,MAAD;AAAQ,QAAA,MAAM,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAC,SAAnC;AAA6C,QAAA,OAAO,EAAEA;AAAtD,QAFF;AAAA,MArBF;AAAA,IADF;AA4BD,CArCD;;AAsCA,eAAeD,UAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { View, Text, Button, CheckBox } from \"react-native\";\nimport AuthContext from \"../../../context/authContext/AuthContext\";\nimport { styles } from \"./homeScreen.style\";\nimport { useQuery, gql } from \"@apollo/client\";\nconst [checked, setChecked] = useState()\n\nconst GET_TODOS = gql`\n  query Todos {\n    todos {\n      id\n      description\n      isFinished\n    }\n  }\n`;\nconst HomeScreen = () => {\n  const { userSignout } = useContext(AuthContext);\n  const { loading, error, data } = useQuery(GET_TODOS);\n  console.log(\"Error: \", error);\n  console.log(\"data: \", data);\n\n  if (loading) return <Text>Loading...</Text>;\n  if (error) return <Text>Error loading todos </Text>;\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.Thead}>\n        <Text style={styles.headline}>TODO</Text>\n      </View>\n\n      <View style={styles.todo_fetch}>\n        {data.todos.map((todo) => (\n          <View style={styles.todo_container} key={todo.id}>\n            <View style={styles.todo_item} >\n              <Text>{todo.description}</Text>\n            </View>\n\n            <CheckBox\n              style={styles.checkbox}\n              value={checked[todo.id]}\n              onValueChange={(newValue) => { setChecked({...checked, [todo.id]: newValue}) }}\n            />\n          </View>\n        ))}\n      </View>\n\n      <View style={styles.Tbottom}>\n        <Button title=\"add todo\" onPress={userSignout} />\n        <Button testID=\"btn-signout\" title=\"LOG OUT\" onPress={userSignout} />\n      </View>\n    </View>\n  );\n};\nexport default HomeScreen;\n"]},"metadata":{},"sourceType":"module"}