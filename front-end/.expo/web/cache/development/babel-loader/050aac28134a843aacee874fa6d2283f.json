{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport React from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GET_TODOS = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  query Todos {\\n    todos {\\n      id\\n      description\\n      isFinished\\n    }\\n  }\\n\"])));\nexport var ids = [];\nexport var idToUpdate = 0;\n\nvar GetTodo = function GetTodo() {\n  var _useQuery = useQuery(GET_TODOS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  console.log(\"Error: \", error);\n  console.log(\"data: \", data);\n  if (loading) return _jsx(Text, {\n    children: \"Loading...\"\n  });\n  if (error) return _jsx(Text, {\n    children: \"Error loading todos \"\n  });\n\n  var _onPress = function onPress(key) {\n    var id = key;\n\n    if (ids.includes(id)) {\n      ids.splice(ids.indexOf(id), 1);\n    } else ids.push(id);\n\n    if (ids.length > 1) {\n      idToUpdate = -1;\n    } else idToUpdate = ids[0];\n\n    console.log(ids);\n    console.log(idToUpdate);\n    console.log(data.todos);\n  };\n\n  return _jsx(View, {\n    style: styles.todo_fetch,\n    children: data.todos.map(function (todo) {\n      return _jsxs(View, {\n        style: styles.todo_container,\n        children: [_jsx(View, {\n          style: styles.todo_item,\n          children: _jsx(Text, {\n            children: todo.description\n          })\n        }), _jsx(BouncyCheckbox, {\n          size: 25,\n          fillColor: \"blue\",\n          unfillColor: \"#FFFFFF\",\n          iconStyle: {\n            borderColor: \"blue\"\n          },\n          textStyle: {\n            fontFamily: \"JosefinSans-Regular\"\n          },\n          onPress: function onPress(checked) {\n            return _onPress(todo.id);\n          }\n        })]\n      }, todo.id);\n    })\n  });\n};\n\nexport default GetTodo;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/kevincheck/front-end/src/screens/postAuthScreens/home/getTodo.tsx"],"names":["React","styles","useQuery","gql","BouncyCheckbox","GET_TODOS","ids","idToUpdate","GetTodo","loading","error","data","console","log","onPress","key","id","includes","splice","indexOf","push","length","todos","todo_fetch","map","todo","todo_container","todo_item","description","borderColor","fontFamily","checked"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,MAAT;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;;;AAEA,IAAMC,SAAS,GAAGF,GAAH,qKAAf;AAUA,OAAO,IAAMG,GAA0B,GAAG,EAAnC;AACP,OAAO,IAAIC,UAAU,GAAG,CAAjB;;AAEP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,kBAAiCN,QAAQ,CAACG,SAAD,CAAzC;AAAA,MAAQI,OAAR,aAAQA,OAAR;AAAA,MAAiBC,KAAjB,aAAiBA,KAAjB;AAAA,MAAwBC,IAAxB,aAAwBA,IAAxB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;AAEA,MAAIF,OAAJ,EAAa,OAAO,KAAC,IAAD;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,KAAC,IAAD;AAAA;AAAA,IAAP;;AAEX,MAAMI,QAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAc;AAC5B,QAAIC,EAAE,GAAGD,GAAT;;AACA,QAAIT,GAAG,CAACW,QAAJ,CAAaD,EAAb,CAAJ,EAAsB;AACpBV,MAAAA,GAAG,CAACY,MAAJ,CAAWZ,GAAG,CAACa,OAAJ,CAAYH,EAAZ,CAAX,EAA4B,CAA5B;AACD,KAFD,MAEOV,GAAG,CAACc,IAAJ,CAASJ,EAAT;;AACP,QAAIV,GAAG,CAACe,MAAJ,GAAa,CAAjB,EAAoB;AAClBd,MAAAA,UAAU,GAAG,CAAC,CAAd;AACD,KAFD,MAEOA,UAAU,GAAGD,GAAG,CAAC,CAAD,CAAhB;;AACPM,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACW,KAAjB;AACD,GAXD;;AAaA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAErB,MAAM,CAACsB,UAApB;AAAA,cACGZ,IAAI,CAACW,KAAL,CAAWE,GAAX,CACC,UAACC,IAAD;AAAA,aAUE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAExB,MAAM,CAACyB,cAApB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEzB,MAAM,CAAC0B,SAApB;AAAA,oBACE,KAAC,IAAD;AAAA,sBAAOF,IAAI,CAACG;AAAZ;AADF,UADF,EAIE,KAAC,cAAD;AACE,UAAA,IAAI,EAAE,EADR;AAEE,UAAA,SAAS,EAAC,MAFZ;AAGE,UAAA,WAAW,EAAC,SAHd;AAIE,UAAA,SAAS,EAAE;AAAEC,YAAAA,WAAW,EAAE;AAAf,WAJb;AAKE,UAAA,SAAS,EAAE;AAAEC,YAAAA,UAAU,EAAE;AAAd,WALb;AAME,UAAA,OAAO,EAAE,iBAACC,OAAD;AAAA,mBAAsBjB,QAAO,CAACW,IAAI,CAACT,EAAN,CAA7B;AAAA;AANX,UAJF;AAAA,SAAyCS,IAAI,CAACT,EAA9C,CAVF;AAAA,KADD;AADH,IADF;AA8BD,CAnDD;;AAqDA,eAAeR,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { View, Text, Button } from \"react-native\";\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\n\nconst GET_TODOS = gql`\n  query Todos {\n    todos {\n      id\n      description\n      isFinished\n    }\n  }\n`;\n\nexport const ids: any[] | (() => any[]) = [];\nexport let idToUpdate = 0;\n\nconst GetTodo = () => {\n  const { loading, error, data } = useQuery(GET_TODOS);\n  console.log(\"Error: \", error);\n  console.log(\"data: \", data);\n\n  if (loading) return <Text>Loading...</Text>;\n  if (error) return <Text>Error loading todos </Text>;\n\n  const onPress = (key: any) => {\n    let id = key;\n    if (ids.includes(id)) {\n      ids.splice(ids.indexOf(id), 1);\n    } else ids.push(id);\n    if (ids.length > 1) {\n      idToUpdate = -1;\n    } else idToUpdate = ids[0];\n    console.log(ids);\n    console.log(idToUpdate);\n    console.log(data.todos);\n  };\n\n  return (\n    <View style={styles.todo_fetch}>\n      {data.todos.map(\n        (todo: {\n          id: React.Key | null | undefined;\n          description:\n            | boolean\n            | React.ReactChild\n            | React.ReactFragment\n            | React.ReactPortal\n            | null\n            | undefined;\n        }) => (\n          <View style={styles.todo_container} key={todo.id}>\n            <View style={styles.todo_item}>\n              <Text>{todo.description}</Text>\n            </View>\n            <BouncyCheckbox\n              size={25}\n              fillColor=\"blue\"\n              unfillColor=\"#FFFFFF\"\n              iconStyle={{ borderColor: \"blue\" }}\n              textStyle={{ fontFamily: \"JosefinSans-Regular\" }}\n              onPress={(checked: boolean) => onPress(todo.id)}\n            />\n          </View>\n        )\n      )}\n    </View>\n  );\n};\n\nexport default GetTodo;\n"]},"metadata":{},"sourceType":"module"}