{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React, { useState } from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { idToUpdate } from \"./getTodo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UPDATE_TODO = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  mutation UpdateTodo($updateTodoId: Int!, $description: String!) {\\n    updateTodo(id: $updateTodoId, description: $description) {\\n      id\\n      description\\n      isFinished\\n    }\\n  }\\n\"])));\n\nvar UpdateTodo = function UpdateTodo() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useMutation = useMutation(UPDATE_TODO, {\n    refetchQueries: [{\n      query: gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n          query Todos {\\n            todos {\\n              id\\n              description\\n              isFinished\\n            }\\n          }\\n        \"])))\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateTodo = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  if (loading) return \"Updating...\";\n  if (error) return \"Update error! \" + error.message;\n\n  var onInputChange = function onInputChange(value) {\n    setInput(value);\n  };\n\n  var updateT = function updateT() {\n    updateTodo({\n      variables: {\n        updateTodoId: idToUpdate,\n        description: input\n      }\n    });\n    console.log(\"input\", input);\n    console.log(\"idToUpdate\", idToUpdate);\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Enter new desctiption here..\",\n      value: input,\n      onChangeText: onInputChange,\n      style: styles.inputTodo\n    }), _jsx(Button, {\n      title: \"Update todo\",\n      onPress: updateT\n    })]\n  });\n};\n\nexport default UpdateTodo;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/kevincheck/front-end/src/screens/postAuthScreens/home/updateTodo.tsx"],"names":["React","useState","styles","useMutation","gql","idToUpdate","UPDATE_TODO","UpdateTodo","input","setInput","refetchQueries","query","updateTodo","loading","error","message","onInputChange","value","updateT","variables","updateTodoId","description","console","log","inputTodo"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;;;;AAEA,SAASC,UAAT;;;AAEA,IAAMC,WAAW,GAAGF,GAAH,4QAAjB;;AAUA,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,kBAA0BN,QAAQ,CAAS,EAAT,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcC,QAAd;;AAEA,qBAAyCN,WAAW,CAACG,WAAD,EAAc;AAChEI,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAEP,GAAF;AADP,KADc;AADgD,GAAd,CAApD;AAAA;AAAA,MAAOQ,UAAP;AAAA;AAAA,MAAqBC,OAArB,kBAAqBA,OAArB;AAAA,MAA8BC,KAA9B,kBAA8BA,KAA9B;;AAeA,MAAID,OAAJ,EAAa,OAAO,aAAP;AACb,MAAIC,KAAJ,EAAW,0BAAwBA,KAAK,CAACC,OAA9B;;AAEX,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAgB;AACpCR,IAAAA,QAAQ,CAACQ,KAAD,CAAR;AACD,GAFD;;AAIA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBN,IAAAA,UAAU,CAAC;AACTO,MAAAA,SAAS,EAAE;AACTC,QAAAA,YAAY,EAAEf,UADL;AAETgB,QAAAA,WAAW,EAAEb;AAFJ;AADF,KAAD,CAAV;AAMAc,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBf,KAArB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BlB,UAA1B;AAED,GAVD;;AAYA,SACE,MAAC,IAAD;AAAA,eACE,KAAC,SAAD;AACE,MAAA,WAAW,EAAC,8BADd;AAEE,MAAA,KAAK,EAAEG,KAFT;AAGE,MAAA,YAAY,EAAEQ,aAHhB;AAIE,MAAA,KAAK,EAAEd,MAAM,CAACsB;AAJhB,MADF,EAOE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,aAAd;AAA4B,MAAA,OAAO,EAAEN;AAArC,MAPF;AAAA,IADF;AAWD,CAhDD;;AAkDA,eAAeX,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Button, View, TextInput } from \"react-native\";\nimport { idToUpdate } from \"./getTodo\";\n\nconst UPDATE_TODO = gql`\n  mutation UpdateTodo($updateTodoId: Int!, $description: String!) {\n    updateTodo(id: $updateTodoId, description: $description) {\n      id\n      description\n      isFinished\n    }\n  }\n`;\n\nconst UpdateTodo = () => {\n  const [input, setInput] = useState<string>(\"\");\n\n  const [updateTodo, { loading, error }] = useMutation(UPDATE_TODO, {\n    refetchQueries: [\n      {\n        query: gql`\n          query Todos {\n            todos {\n              id\n              description\n              isFinished\n            }\n          }\n        `,\n      },\n    ],\n  });\n  if (loading) return \"Updating...\";\n  if (error) return `Update error! ${error.message}`;\n\n  const onInputChange = (value: any) => {\n    setInput(value);\n  };\n\n  const updateT = () => {\n    updateTodo({\n      variables: {\n        updateTodoId: idToUpdate,\n        description: input,\n      },\n    });\n    console.log(\"input\", input);\n    console.log(\"idToUpdate\", idToUpdate);\n    \n  };\n\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Enter new desctiption here..\"\n        value={input}\n        onChangeText={onInputChange}\n        style={styles.inputTodo}\n      />\n      <Button title=\"Update todo\" onPress={updateT} />\n    </View>\n  );\n};\n\nexport default UpdateTodo;\n"]},"metadata":{},"sourceType":"module"}