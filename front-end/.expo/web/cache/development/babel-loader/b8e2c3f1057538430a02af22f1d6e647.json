{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ids } from \"./getTodo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DELETE_TODO = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  mutation DeleteTodos($ids: [Int]!) {\\n    deleteTodos(ids: $ids) {\\n      id\\n      description\\n      isFinished\\n    }\\n  }\\n\"])));\n\nvar DeleteTodo = function DeleteTodo() {\n  var _useMutation = useMutation(DELETE_TODO, {\n    refetchQueries: [{\n      query: gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n          query Todos {\\n            todos {\\n              id\\n              description\\n              isFinished\\n            }\\n          }\\n        \"])))\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      deleteTodo = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  if (loading) return \"Deleting...\";\n  if (error) return \"Deleting error! \" + error.message;\n\n  var deleteT = function deleteT() {\n    deleteTodo({\n      variables: {\n        ids: ids\n      }\n    });\n    ids = [];\n  };\n\n  return _jsx(TouchableOpacity, {\n    testID: \"btn-signout\",\n    style: styles.Button1,\n    onPress: deleteT,\n    children: _jsx(Text, {\n      style: {\n        color: \"#fff\"\n      },\n      children: \"Delete\"\n    })\n  });\n};\n\nexport default DeleteTodo;","map":{"version":3,"sources":["/Users/nelisoftwares/Projects/kevincheck/kevincheck/front-end/src/screens/postAuthScreens/home/deleteTodo.tsx"],"names":["React","styles","useMutation","gql","ids","DELETE_TODO","DeleteTodo","refetchQueries","query","deleteTodo","loading","error","message","deleteT","variables","Button1","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,MAAT;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;;;AAEA,SAASC,GAAT;;AAEA,IAAMC,WAAW,GAAGF,GAAH,6MAAjB;;AAUA,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,qBAAyCJ,WAAW,CAACG,WAAD,EAAc;AAChEE,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAEL,GAAF;AADP,KADc;AADgD,GAAd,CAApD;AAAA;AAAA,MAAOM,UAAP;AAAA;AAAA,MAAqBC,OAArB,kBAAqBA,OAArB;AAAA,MAA8BC,KAA9B,kBAA8BA,KAA9B;;AAeA,MAAID,OAAJ,EAAa,OAAO,aAAP;AACb,MAAIC,KAAJ,EAAW,4BAA0BA,KAAK,CAACC,OAAhC;;AAEX,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBJ,IAAAA,UAAU,CAAC;AACTK,MAAAA,SAAS,EAAE;AACTV,QAAAA,GAAG,EAAEA;AADI;AADF,KAAD,CAAV;AAKAA,IAAAA,GAAG,GAAG,EAAN;AACD,GAPD;;AASA,SACE,KAAC,gBAAD;AACE,IAAA,MAAM,EAAC,aADT;AAEE,IAAA,KAAK,EAAEH,MAAM,CAACc,OAFhB;AAGE,IAAA,OAAO,EAAEF,OAHX;AAAA,cAKE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AALF,IADF;AASD,CArCD;;AAuCA,eAAeV,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { styles } from \"./homeScreen.style\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Text, TouchableOpacity } from \"react-native\";\nimport { ids } from \"./getTodo\";\n\nconst DELETE_TODO = gql`\n  mutation DeleteTodos($ids: [Int]!) {\n    deleteTodos(ids: $ids) {\n      id\n      description\n      isFinished\n    }\n  }\n`;\n\nconst DeleteTodo = () => {\n  const [deleteTodo, { loading, error }] = useMutation(DELETE_TODO, {\n    refetchQueries: [\n      {\n        query: gql`\n          query Todos {\n            todos {\n              id\n              description\n              isFinished\n            }\n          }\n        `,\n      },\n    ],\n  });\n  if (loading) return \"Deleting...\";\n  if (error) return `Deleting error! ${error.message}`;\n\n  const deleteT = () => {\n    deleteTodo({\n      variables: {\n        ids: ids,\n      },\n    });\n    ids = [];\n  };\n\n  return (\n    <TouchableOpacity\n      testID=\"btn-signout\"\n      style={styles.Button1}\n      onPress={deleteT}\n    >\n      <Text style={{ color: \"#fff\" }}>Delete</Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default DeleteTodo;\n"]},"metadata":{},"sourceType":"module"}